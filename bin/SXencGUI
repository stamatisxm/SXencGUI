#!/usr/bin/env bash

#
#    Copyright (C) 2015-2016  Stamatis X. Mavrogeorgis
#
#    Author's Email: stamatis@zirconix.net
#    Author's Website: http://www.istos.xyz
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# version 0.2.2 Added Help Dropdown Box
# version 0.2.1 Modified interface to include mount information
# version 0.1.1 Added encfs existence check
# version 0.1.0 Initial concept

showVersion() {
  echo $(grep '^# version' $(which ${0##*/}) | cut -f3 -d\  | sort -u | tail -1)
}

[[ $1 == '-V' ]] || [[ $1 == '-v' ]] && showVersion && exit

[[ -x $(which gxmessage) ]] && g='g'

MESSAGECMD="${g}xmessage"

[[ ! -x $(which zenity) ]] && $MESSAGECMD -title "${0##*/}" "This program requires zenity to run" && exit

[[ ! -x $(which encfs) ]] && { zenity --error --title "${0##*/}" --text "* You need to install encfs first!\n\n\tTHEN:\n\n* Create an initial encrypted directory\nwith encfs as follows:\n\nencfs ~/some_directory ~/some_existing_mount_point\n\n* Then you can use this program to handle\n(mount / unmount) encrypted directories." || true; } && exit

[[ $(pgrep -au $USER zenity | grep "\-\-name=${0##*/}") ]] && { zenity 2>/dev/null --error --text "${0##*/} is already running!" & } && exit

MYVERSION=$(grep '^# version' $0 | cut -f3 -d\  | sort -r | head -1)

while true; do {

  ZOPERATION=$(zenity 2>/dev/null \
    --cancel-label="Quit" \
    --ok-label="Mount/Unmount/Refresh" \
    --title="${0##*/} $MYVERSION" \
    --name="${0##*/} $MYVERSION" \
    --text="Mount / Unmount Encrypted Directories / Filesystems" \
    --forms \
    --add-combo="Mount/Unmount Action:" \
    --combo-values="Mount|Unmount|Refresh" \
    --add-list="Mounted Directories:" \
    --list-values="$(mount | grep '^encfs' | awk '{ print $3 }' | paste -s -d'|')" \
    --add-combo="Click Drop-down Help:" \
    --combo-values="* To mount an encrypted directory, select|'Mount' from the Action drop-down menu and|press the 'Mount/Unmount/Refresh' button|* Select the encrypted directory from the|File Selection Dialog and press OK|* Select the mount point from the next|File Selection Dialog and press OK|* Enter the password you have used to set|the encrypted directory up and press OK|------------------------------------------|* To unmount an encrypted directory,|select 'Unmount' from the Action dropdown|select the directory to unmount from the|'Mounted Directories' List and click on|the 'Mount/Unmount/Refresh button|------------------------------------------|* To just refresh the directories list,|click the 'Mount/Unmount/Refresh' button|while 'Refresh' is selected from Action|------------------------------------------|* To exit the program press 'Quit ${0##*/}'") 

  [[ $? -ne 0 ]] && break

  echo $ZOPERATION

  MNTOP=$(echo $ZOPERATION | cut -f1 -d'|' | cut -f1 -d' ')
  MNTDIR=$(echo $ZOPERATION | cut -f2 -d'|' | cut -f1 -d',')


  if [[ $MNTOP == "Mount" ]]; then {
    ENCDIR=$(zenity 2>/dev/null --title="Select Encrypted Directory" --name="${0##*/} $MYVERSION" --file-selection --directory)

    [[ -z $ENCDIR ]] && continue

    MNTDIR=$(zenity 2>/dev/null --title="Select Mount Point" --name="${0##*/} $MYVERSION" --file-selection --directory)

    [[ -z $MNTDIR ]] && continue

    PASSWD=$(zenity 2>/dev/null --title="Passphrase" --name="${0##*/} $MYVERSION" --password)

    [[ -z $PASSWD ]] && continue

    [[ -n $ENCDIR ]] && [[ -n $MNTDIR ]] && [[ -n $PASSWD ]] \
      && echo $PASSWD | encfs -S $ENCDIR $MNTDIR

  } elif [[ $MNTOP == "Unmount" ]] && [[ -n $MNTDIR ]]; then {
    [[ -n $MNTDIR ]] \
      && [[ -d $MNTDIR ]] \
      || MNTDIR=$(zenity 2>/dev/null --title="Select Directory To Unmount" \
                --name="${0##*/} $MYVERSION" --file-selection --directory)
 
    [[ -z $MNTDIR ]] && continue

    [[ -n $MNTDIR ]] && fusermount -u $MNTDIR
  } else {
      continue
  };fi

}; done
