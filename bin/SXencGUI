#!/usr/bin/env bash

#
#    Copyright (C) 2015-2017  Stamatis X. Mavrogeorgis
#
#    Author's Email: stamatis@zirconix.net
#    Author's Website: http://www.istos.xyz
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# version 0.2.5 - Added Resource file capabilities
# version 0.2.4 - Added password attempts limit
# version 0.2.3 - Fixed some logic bugs
# version 0.2.2 - Added Help Dropdown Box
# version 0.2.1 - Modified interface to include mount information
# version 0.1.1 - Added encfs existence check
# version 0.1.0 - Initial concept

HELPSTRING="\
* To mount an encrypted directory, select|\
'Mount' from the Action drop-down menu and|\
press the 'Mount/Unmount/Refresh' button|\
* Select the encrypted directory from the|\
File Selection Dialog and press OK|\
* Select the mount point from the next|\
File Selection Dialog and press OK|\
* Enter the password you have used to set|\
the encrypted directory up and press OK|\
------------------------------------------|\
* To unmount an encrypted directory,|\
select 'Unmount' from the Action dropdown|\
select the directory to unmount from the|\
'Mounted Directories' List and click on|\
the 'Mount/Unmount/Refresh button|\
------------------------------------------|\
* To just refresh the directories list,|\
click the 'Mount/Unmount/Refresh' button|\
while 'Refresh' is selected from Action|\
------------------------------------------|\
* To exit the program press 'Quit ${0##*/}'"

showVersion() {
  echo $(grep '^# version' $(which ${0##*/}) | cut -f3 -d\  | sort -u | tail -1)
}

[[ $1 == '-V' ]] || [[ $1 == '-v' ]] && showVersion && exit

[[ -x $(which gxmessage) ]] && g='g'

MESSAGECMD="${g}xmessage"
ZMSGDIM01='--width=400 --height=256'
ZMSGDIM02='--width=320 --height=192'
ERRMSG01="This program requires the installation of <span color='#FF0000'>encfs</span> utility!\n\n\tTHEN:\n\n* Create an initial encrypted directory with <span color='#FF0000'>encfs</span> as follows:\n<span color='#0000FF'>encfs ~/some_directory ~/some_existing_mount_point</span>\n\n* Use <span color='#0000FF'>${0##*/}</span> to mount / unmount encrypted directories."
ERRMSG02="You have attempted unsuccessfuly <span color='#FF0000'>3 times</span> with what seems to be the wrong password...\n\nReturning to the initial screen of ${0##*/}..."

[[ ! -x $(which zenity) ]] && $MESSAGECMD -title "${0##*/}" "${0##*/} requires zenity to be installed on this system!" && exit

[[ ! -x $(which encfs) ]] && { zenity 2>/dev/null $ZMSGDIM01 --error --title "${0##*/}" --text "$ERRMSG01" || true; } && exit

[[ $(pgrep -au $USER zenity | grep "\-\-name=${0##*/}") ]] && { zenity 2>/dev/null --error --text "${0##*/} is already running!" & } && exit

MYVERSION=$(grep '^# version' $0 | cut -f3 -d\  | sort -r | head -1)

while true; do {
  RCFILE=$HOME/.SXencGUIrc
  MNTPLIST=$(paste 2>/dev/null -s -d'|' $RCFILE)

  [[ -n $MNTPLIST ]] && MNTPLIST="|$MNTPLIST"

  ZOPERATION=$(zenity 2>/dev/null \
    --cancel-label="Quit ${0##*/}" \
    --ok-label="Mount/Unmount/Refresh" \
    --title="${0##*/} $MYVERSION" \
    --name="${0##*/} $MYVERSION" \
    --text="Mount / Unmount Encrypted Directories / Filesystems" \
    --forms \
    --add-combo="Mount/Unmount Action:" \
    --combo-values="Mount|Unmount|Refresh" \
    --add-combo="[Encrypted Directory] [Mountpoint]:" \
    --combo-values="$MNTPLIST" \
    --add-list="Mounted Directories:" \
    --list-values="$(mount | grep '^encfs' | awk '{ print $3 }' | paste -s -d'|')" \
    --add-combo="Click Drop-down Help:" \
    --combo-values="$HELPSTRING") 

  [[ $? -ne 0 ]] && break

  ZOPERATION=$(echo $ZOPERATION | sed -e 's@|\s|@||@g' -e 's@,@@')
  MNTOP=$(echo $ZOPERATION | cut -f1 -d'|')
  MNTGRP=$(echo $ZOPERATION | cut -f2 -d'|')
  MNTDIR=$(echo $ZOPERATION | cut -f3 -d'|')
  
#echo $ZOPERATION && exit;

  if [[ $MNTOP == "Mount" ]]; then {
    ENCDIR=$(echo $MNTGRP | cut -f1 -d' ')
    [[ -z $ENCDIR ]] && \
      ENCDIR=$(zenity 2>/dev/null --title="Select Encrypted Directory" --name="${0##*/} $MYVERSION" --file-selection --directory) && ENCDIR=$(echo $ENCDIR | sed -e 's@,@@')
    [[ $ENCDIR == $HOME ]] || [[ -z $ENCDIR ]] && continue

    MNTDIR=$(echo $MNTGRP | cut -f2 -d' ')
    [[ -z $MNTDIR ]] && \
      MNTDIR=$(zenity 2>/dev/null --title="Select Mount Point" --name="${0##*/} $MYVERSION" --file-selection --directory) && MNTDIR=$(echo $MNTDIR | sed -e 's@,@@')
    [[ $MNTDIR == $HOME ]] || [[ -z $MNTDIR ]] || [[ $ENCDIR == $MNTDIR ]] && continue
    PASSWDCOUNTER=0

    while [[ $PASSWDCOUNTER -lt 3 ]]; do {
      PASSWD=$(zenity 2>/dev/null --title="Passphrase" --name="${0##*/} $MYVERSION" --password) || break
      [[ -z $PASSWD ]] && continue
      [[ -n $ENCDIR ]] && [[ -n $MNTDIR ]] && [[ -n $PASSWD ]] \
        && echo $PASSWD | encfs -S $ENCDIR $MNTDIR \
        || { ((PASSWDCOUNTER++)) && continue; } && break
    }; done
    [[ $PASSWDCOUNTER -eq 3 ]] \
    && zenity 2>/dev/null $ZMSGDIM02 --error --text "$ERRMSG02"

  } elif [[ $MNTOP == "Unmount" ]] && [[ -n $MNTDIR ]]; then {
    [[ -n $MNTDIR ]] \
      && [[ -d $MNTDIR ]] \
      || MNTDIR=$(zenity 2>/dev/null --title="Select Directory To Unmount" \
                --name="${0##*/} $MYVERSION" --file-selection --directory)
 
    [[ -z $MNTDIR ]] && continue

    [[ -n $MNTDIR ]] && fusermount -u $MNTDIR
  } else {
      continue
  };fi

}; done
